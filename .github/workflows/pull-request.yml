name: Pull Request
on:
  pull_request:
    types: [opened, edited, synchronize]
    paths-ignore:
      - LICENSE.md
      - .gitignore
      - Justfile
jobs:
  format:
    name: Formatting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install Toolchain
        uses: actions-rs/toolchain@v1
        with:
          components: rustfmt
          toolchain: stable
          override: true
          profile: minimal
      - name: Check Formatting
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: -- --check
  lint:
    name: Lint Source
    runs-on: ubuntu-latest
    strategy:
      matrix:
        features:
          - name: Default
            args: ''
          - name: No Standard
            args: --no-default-features
          - name: All Features
            args: --all-features
          - name: Report
            args: --features report
          - name: Unstable
            args: --features unstable
          - name: Nightly
            args: --features nightly
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install Toolchain
        uses: actions-rs/toolchain@v1
        with:
          components: clippy
          toolchain: stable
          override: true
          profile: minimal
      - name: Clippy
        uses: actions-rs/clippy-check@v1
        with:
          token: ${{github.token}}
          args: ${{matrix.features.args}} -- -D warnings
          name: Lint (${{matrix.features.name}})
  test:
    name: Test Suite
    runs-on: ${{matrix.os}}-latest
    needs: [lint, format]
    defaults:
      run:
        shell: bash
    strategy:
      matrix:
        toolchain: [stable, beta, nightly]
        profile: [release, dev]
        # One day we'll be able to just use `--profile`, but until then we need
        # to do this workaround to simplify the build steps
        os: [ubuntu, windows, macos]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Authenticate GitHub CLI
        run: echo ${{github.token}} | gh auth login --with-token
      - name: Setup Shared Compilation Cache
        working-directory: ${{github.workspace}}
        run: bash -c .github/scripts/setup-sccache
      - name: Setup Cargo Hack
        working-directory: ${{github.workspace}}
        run: bash -c .github/scripts/setup-cargo-hack
      - name: Install Toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{matrix.toolchain}}
          override: true
          profile: minimal
      - name: Restore Cargo Cache
        uses: actions/cache@v2
        with:
          restore-keys: ${{runner.os}}-cargo-
          key: ${{runner.os}}-cargo-${{hashFiles('**/Cargo.lock')}}
          path: |
            ${{github.workspace}}/target
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            ~/.cargo/git
      - name: Restore sccache build artifacts
        uses: actions/cache@v2
        with:
          restore-keys: ${{runner.os}}-${{matrix.toolchain}}-${{matrix.profile}}-
          key: ${{runner.os}}-${{matrix.toolchain}}-${{matrix.profile}}-${{hashFiles('**/Cargo.lock')}}
          path: ${{env.SCCACHE_DIR}}
      - name: Run Tests (${{matrix.profile}})
        uses: actions-rs/cargo@v1
        with:
          command: hack
          args: test --profile ${{matrix.profile}} --locked --each-feature
        env:
          RUSTC_WRAPPER: sccache
  coverage:
    name: Code Coverage
    runs-on: ${{matrix.os}}-latest
    needs: [lint, format]
    defaults:
      run:
        shell: bash
    strategy:
      matrix:
        os: [ubuntu, windows, macos]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Authenticate GitHub CLI
        run: echo ${{github.token}} | gh auth login --with-token
      - name: Setup Shared Compilation Cache
        working-directory: ${{github.workspace}}
        run: bash -c .github/scripts/setup-sccache
      - name: Setup Cargo Hack
        working-directory: ${{github.workspace}}
        run: bash -c .github/scripts/setup-cargo-hack
      - name: Install Toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          override: true
          profile: minimal
          components: llvm-tools-preview
      - name: Restore Cargo Cache
        uses: actions/cache@v2
        with:
          restore-keys: ${{runner.os}}-cargo-
          key: ${{runner.os}}-cargo-${{hashFiles('**/Cargo.lock')}}
          path: |
            ${{github.workspace}}/target
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            ~/.cargo/git
      - name: Restore sccache build artifacts
        uses: actions/cache@v2
        with:
          restore-keys: ${{runner.os}}-nightly-coverage-
          key: ${{runner.os}}-nightly-coverage-${{hashFiles('**/Cargo.lock')}}
          path: ${{env.SCCACHE_DIR}}
      - name: Run Tests (coverage)
        uses: actions-rs/cargo@v1
        with:
          command: hack
          args: test --profile coverage --locked --each-feature
        env:
          LLVM_PROFILE_FILE: target/coverage/outcome-%p-%m.profraw
          RUSTC_WRAPPER: sccache
          RUSTDOCSFLAGS: -Zinstrument-coverage
          RUSTFLAGS: -Zinstrument-coverage
      - name: List all coverage files
        run: |
          find ${{github.workspace}} -name "*.gc*"
          find ${{github.workspace}} -name "*.profraw"
      - name: Collect Coverage
        uses: actions-rs/grcov@v0.1
        with:
          config: .github/settings/grcov.yml
      - name: Check coverage.info exists
        run: test -f ${{github.workspace}}/coverage.info
#      - name: Upload Code Coverage
#        uses: codecov/codecov-action@v2
#        with:
#          fail_ci_if_error: true
#          directory: ${{github.workspace}}
#          dry_run: true 
