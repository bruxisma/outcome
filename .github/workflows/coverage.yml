name: Code Coverage
on:
  pull_request:
    types: [opened, edited, synchronize]
  push:
jobs:
  coverage:
    name: Code Coverage
    runs-on: ${{matrix.os}}-latest
    strategy:
      matrix:
        os: [ubuntu, windows, macos]
    env:
      RUSTC_WRAPPER: sccache
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Authenticate GitHub CLI
        run: echo ${{github.token}} | gh auth login --with-token
      - name: Setup Shared Compilation Cache
        working-directory: ${{github.workspace}}
        run: bash -c .github/scripts/setup-sccache
      - name: Setup Cargo Hack
        working-directory: ${{github.workspace}}
        run: bash -c .github/scripts/setup-cargo-hack
      - name: Install Toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          override: true
          profile: minimal
          components: llvm-tools-preview
      - name: Restore Cargo Cache
        uses: actions/cache@v2
        with:
          restore-keys: ${{runner.os}}-cargo-
          key: ${{runner.os}}-cargo-${{hashFiles('**/Cargo.lock')}}
          path: |
            ${{github.workspace}}/target
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            ~/.cargo/git
      - name: Restore sccache build artifacts
        uses: actions/cache@v2
        with:
          restore-keys: ${{runner.os}}-nightly-coverage-
          key: ${{runner.os}}-nightly-coverage-${{hashFiles('**/Cargo.lock')}}
          path: ${{env.SCCACHE_DIR}}
      - name: Install grcov (workaround)
        uses: actions-rs/cargo@v1
        with:
          command: install
          args: grcov
      - name: Run Tests (coverage)
        uses: actions-rs/cargo@v1
        with:
          command: hack
          args: test --profile coverage --locked --each-feature
        env:
          LLVM_PROFILE_FILE: target/coverage/outcome-%p-%m.profraw
          RUSTDOCFLAGS: -Zinstrument-coverage
          RUSTFLAGS: -Zinstrument-coverage
      - name: Collect Coverage
        run: >-
          grcov ${{github.workspace}}
          --binary-path ${{github.workspace}}/target/coverage
          --output-path ${{github.workspace}}/coverage.info
          --output-type lcov
          --source-dir ${{github.workspace}}
          --ignore "/*"
          --ignore "C:/*"
          --ignore "../*"
          --ignore-not-existing
          --branch
      - name: Check coverage.info exists
        run: test -f ${{github.workspace}}/coverage.info
      - name: Upload Code Coverage
        uses: codecov/codecov-action@v2
        with:
          fail_ci_if_error: true
          directory: ${{github.workspace}}
          files: coverage.info
